using LocalTheatre.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;

namespace LocalTheatre
{
    public partial class Blog : System.Web.UI.Page
    {/// <summary>
     ///the method to bind the grid
     /// is called in Page_Load
    /// if not post back
    /// bind the grid
    /// </summary>
    /// <param name="sender"></param> pageload
    /// <param name="e"></param> the event allows to bind the grid on load
        protected void Page_Load(object sender, EventArgs e)
        {
            if (!IsPostBack)
            {
                BindPostGrid();
            }
        }
        /// <summary>
        /// The method to BindPostGrid() is detailed here,
        /// to be called on in the Page_Load
        /// selecting the Posts from database instance db as the data source
        /// the grid view is bound
        /// </summary>

        private void BindPostGrid()
        {
            ApplicationDbContext db = new ApplicationDbContext();
            GridView1.DataSource = db.Posts.ToList();
            GridView1.DataBind();

        }

        /// <summary>
        /// add comment page
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>

        protected void btnAddAComment_Click(object sender, EventArgs e)
        {
            ApplicationDbContext db = new ApplicationDbContext();
        }
        /// <summary>
        /// RowDataBound binds the content of the rows to the grid
        /// and then writes to the database
        /// if it is the current data control row type
        /// the current row is obtained by finding row index with e.RowIndex
        /// Retrieve the current postId
        /// var comments obtained with linq querry
        /// for that post id
        /// use the list of comments to populate the grid view
        /// if user is admin they can see the button to delete
        /// find control using cells[0] and identifier "grdComments"
        /// </summary>
        /// <param name="sender"></param> button
        /// <param name="e"></param> binding data

        protected void GridView1_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            ApplicationDbContext db = new ApplicationDbContext();
            //new instance of db manager 
            if(e.Row.RowType ==DataControlRowType.DataRow )
                //if it's the current rown
            {
                int rowIndex = e.Row.RowIndex;
                //get current row
                int val = (int)GridView1.DataKeys[rowIndex]["PostId"];
                //retrieve the current postId

                var comments = from u in db.Comments
                               where u.PostId == val
                               select u;
                //use the linq to get all the comments for that postId

                List<Comment> listComments = comments.ToList();
                //use the list of comments to populate the grid view

                GridView grd2 = (GridView)e.Row.Cells[0].FindControl("grdComments");
                if(!User.IsInRole("Admin")&&User.IsInRole("SuspendedUser"))
                {
                    grd2.AutoGenerateDeleteButton = false;
                }
                //find control using cells[0] and identifier "grdComments"
                
                    grd2.DataSource = listComments;
                //the data source for the grid view of comments is the list of comments
                    grd2.DataBind();


                
             
            }
        }
        /// <summary>
        /// Add Comment method.
        /// The panel is shown
        /// found in a row with NamingContainer
        /// panel is found using its name and FindControl
        /// panel's visiblity is set to true
        /// set link button visibility to be false
        /// </summary>
        /// <param name="sender"></param> button
        /// <param name="e"></param> add comment via link button
        protected void lnkShowAddComment_Click(object sender, EventArgs e)
        {
            //show panel
            LinkButton btn = (LinkButton)sender;
            //cast the sender as Link Button
            GridViewRow row =(GridViewRow) btn.NamingContainer;
            //find panel in a row
            Panel pnl = (Panel)row.FindControl("pnlComment");
            //Finds control using "pnl Comment" its name

            pnl.Visible = true;
           
            //set visibility to true
            
            //set link button visibility to be false
            btn.Visible = false;
        }
        /// <summary>
        /// The method to post a comment on a blog
        /// using Add(newComment)
        /// if user is correctly authenticated
        /// </summary>
        /// <param name="sender"></param> is the button
        /// <param name="e"></param> is adding a comment
        protected void btnSubmitComment_Click(object sender, EventArgs e)
        {

            //insert comment
            Button btn = (Button)sender;

            GridViewRow row = (GridViewRow)btn.NamingContainer;
            //add new Review to context
            int postid =(int) GridView1.DataKeys[row.RowIndex]["PostId"];
            string uname = "anonymous";
            if (User.Identity.IsAuthenticated)
            {
                uname= User.Identity.Name;
            }
            TextBox txtC =(TextBox) row.FindControl("txtComment");
            Comment newComment = new Comment {
                UserId = uname,
                PostId=postid, 
                Date = DateTime.Now,
                Text = txtC.Text };
            ApplicationDbContext context = new ApplicationDbContext();
            context.Comments.Add(newComment);
            context.SaveChanges();
            BindPostGrid();
        }
        /// <summary>
        /// Delete a comment.
        /// cast grdComments as GridView
        /// cast gridViewRow as such
        /// comment id is found in its row using row index and its name
        /// comment is found in database instance db with its id
        /// comment is removed using remove nethod
        /// changes are saved
        /// grid is bound
        /// </summary>
        /// <param name="sender"></param> gridview
        /// <param name="e"></param>event of row deletion
        protected void grdComments_RowDeleting(object sender, GridViewDeleteEventArgs e)
        {
            //delete a comment
            //Row row = (Row)sender;
            ApplicationDbContext db = new ApplicationDbContext();
            GridView grdComments = (GridView)sender;
            //cast grid view to sender

            GridViewRow row = (GridViewRow)grdComments.Rows[e.RowIndex];
            //grdComments is nested so needs to be cast as grid view

            int commentid = (int) grdComments.DataKeys[e.RowIndex]["CommentId"];

            var comment = db.Comments.Find(commentid);

            db.Comments.Remove(comment);

           // var commentsToDelete = from c in db.Comments
                                  // where c.CommentId == commentid
                                   //select c;

            //db.Comments.RemoveRange(commentsToDelete);

            db.SaveChanges();
            BindPostGrid();

        }
    }
}